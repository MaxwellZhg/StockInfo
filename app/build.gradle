apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'

kapt {
    // 在需要使用databinding的module中添加
    generateStubs = true
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        applicationId "com.zhuorui.securities"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        multiDexEnabled true

        ndk {
            // 设置支持的SO库架构
            abiFilters 'armeabi' //, 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }
    }

    // 配置打包的签名
    signingConfigs {
        config {
            keyAlias 'zr'
            keyPassword 'zr@666'
            storeFile file('../config/zr_sign.jks')
            storePassword 'zr@666'
        }
    }
    buildTypes {
        debug {
            // 混淆代码
            minifyEnabled false
            // 混淆代码规则文件
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
        release {
            // 混淆代码
            minifyEnabled false
            // 混淆代码规则文件
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
    }

    // 指定Jdk版本
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // 使用Kotlin实验特性
    androidExtensions {
        experimental = true
    }

    // 使用databinding
    dataBinding {
        enabled = true
    }

    // 配置打包的apk命名规则
    android.applicationVariants.all {
        variant ->
            def run_model = "ok"
            // 读取网络环境配置文件信息
            def readConfigRunModel = {
                File configFile = file("src/main/assets/config.properties")
                FileReader reader = new FileReader(configFile)
                String run_mode = reader.readLine()
                int index = run_mode.indexOf("=")
                run_model = run_mode.substring(index + 1)
            }
            readConfigRunModel.run()
            def appName = "Zr"
            def versionName = "v" + variant.getVersionName()
            def buildTypeName = variant.buildType.name
            def time = new Date().format("MMddHH")
            def outApkName = appName + "_" + buildTypeName + "_" + time + "_" + versionName + "_" + run_model + ".apk"
            variant.outputs.all {
                outputFileName = outApkName
            }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // 自选+行情
    implementation project(':market')
    // 资讯
    implementation project(':infomation')
    // 开户
    implementation project(":openaccount")
    // 个人中心
    implementation project(':personal')

    //其中latest.release指代最新Bugly SDK版本号，也可以指定明确的版本号，例如2.2.0
    implementation 'com.tencent.bugly:crashreport:latest.release'
    //其中latest.release指代最新Bugly NDK版本号，也可以指定明确的版本号，例如3.0
    implementation 'com.tencent.bugly:nativecrashreport:latest.release'

    // databinding
    kapt "com.android.databinding:compiler:$databinding_version"
}
